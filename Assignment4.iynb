# Import required libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from scipy import stats

# Configuration
# Use a style registered by Seaborn for Matplotlib
# 'seaborn-v0_8-whitegrid' is a valid style after importing seaborn
plt.style.use('seaborn-v0_8-whitegrid')
sns.set_palette('pastel')
pd.set_option('display.max_columns', 15)
np.random.seed(42)

# Load dataset
df = sns.load_dataset('titanic')
print(f"Dataset Shape: {df.shape}")

# ======================
# 1. Data Quality Check
# ======================
print("\n=== Missing Value Analysis ===")
missing = df.isnull().sum().sort_values(ascending=False)
missing_pct = (df.isnull().mean() * 100).round(1)
missing_df = pd.DataFrame({'Missing': missing, '%': missing_pct})
print(missing_df[missing_df['Missing'] > 0])

# Handle missing values
df.drop('deck', axis=1, inplace=True)  # High missingness
df['age'].fillna(df['age'].median(), inplace=True)  # Numerical imputation
df['embarked'].fillna(df['embarked'].mode()[0], inplace=True)  # Categorical imputation
df['embark_town'] = df['embark_town'].fillna(df['embark_town'].mode()[0])

# =============================
# 2. Distribution Analysis
# =============================
# Configure plot layout
fig, axes = plt.subplots(3, 3, figsize=(18, 16))
fig.suptitle('Feature Distributions', fontsize=20, y=0.99)

# Numerical distributions
sns.histplot(df['age'], kde=True, bins=30, ax=axes[0, 0])
axes[0, 0].set_title('Age Distribution (Bimodal)')
axes[0, 0].axvline(df['age'].median(), color='r', linestyle='--')

sns.histplot(df['fare'], kde=True, bins=50, ax=axes[0, 1])
axes[0, 1].set_title('Fare Distribution (Right-Skewed)')
axes[0, 1].set_xlim(0, 300)  # Focus on majority of data

sns.countplot(x='sibsp', data=df, ax=axes[0, 2])
axes[0, 2].set_title('Siblings/Spouses Count')

# Categorical distributions
sns.countplot(x='survived', data=df, ax=axes[1, 0])
axes[1, 0].set_title('Survival (38% Survived)')

sns.countplot(x='pclass', data=df, ax=axes[1, 1])
axes[1, 1].set_title('Passenger Class Distribution')

sns.countplot(x='sex', data=df, ax=axes[1, 2])
axes[1, 2].set_title('Gender Distribution (65% Male)')

sns.countplot(x='embarked', data=df, ax=axes[2, 0])
axes[2, 0].set_title('Embarkation Port')

sns.countplot(x='alone', data=df, ax=axes[2, 1])
axes[2, 1].set_title('Traveling Alone')

axes[2, 2].axis('off')  # Hide empty subplot

plt.tight_layout()
plt.show()

# ======================
# 3. Outlier Detection
# ======================
fig, ax = plt.subplots(1, 2, figsize=(14, 6))
sns.boxplot(x=df['age'], ax=ax[0], color='skyblue')
ax[0].set_title('Age Distribution')
sns.boxplot(x=df['fare'], ax=ax[1], color='salmon')
ax[1].set_title('Fare Distribution (Log Scale)')
ax[1].set_xscale('log')  # Better visualization for skewed data
plt.tight_layout()
plt.show()

# Statistical outlier analysis
print("\n=== Outlier Analysis ===")
fare_stats = df['fare'].describe(percentiles=[.25, .5, .75])
IQR = fare_stats['75%'] - fare_stats['25%']
upper_bound = fare_stats['75%'] + 1.5 * IQR
outliers = df[df['fare'] > upper_bound]
print(f"Fare outliers (> ${upper_bound:.2f}): {len(outliers)} passengers ({len(outliers)/len(df)*100:.1f}%)")

# =============================
# 4. Relationship Analysis
# =============================
# Correlation matrix
plt.figure(figsize=(12, 8))
corr_matrix = df.select_dtypes(include='number').corr()
mask = np.triu(np.ones_like(corr_matrix, dtype=bool))
sns.heatmap(corr_matrix, mask=mask, annot=True, cmap='coolwarm', fmt='.2f',
            linewidths=0.5, cbar_kws={'shrink': 0.7})
plt.title('Feature Correlation Matrix', fontsize=16)
plt.show()

# Survival analysis
fig, axes = plt.subplots(2, 2, figsize=(16, 12))

# Survival by class and gender
sns.barplot(x='pclass', y='survived', hue='sex', data=df, ax=axes[0, 0],
            order=[1, 2, 3], ci=None)
axes[0, 0].set_title('Survival Rate by Class & Gender')
axes[0, 0].set_ylabel('Survival Rate')
axes[0, 0].set_ylim(0, 1)

# Age distribution by survival
sns.kdeplot(data=df, x='age', hue='survived', fill=True, ax=axes[0, 1],
            common_norm=False, palette='viridis')
axes[0, 1].set_title('Age Distribution by Survival Status')
axes[0, 1].axvline(df['age'].median(), color='black', linestyle='--', alpha=0.5)

# Fare vs survival
sns.boxplot(x='survived', y='fare', data=df, ax=axes[1, 0], showfliers=False)
axes[1, 0].set_title('Fare Distribution by Survival')
axes[1, 0].set_yscale('log')

# Family size impact
df['family_size'] = df['sibsp'] + df['parch'] + 1
sns.pointplot(x='family_size', y='survived', data=df, ax=axes[1, 1], ci=95,
              color='purple')
axes[1, 1].set_title('Survival Rate by Family Size')
axes[1, 1].set_ylabel('Survival Probability')
axes[1, 1].set_ylim(0, 0.8)

plt.tight_layout()
plt.show()

# =====================
# 5. Advanced Insights
# =====================
# Embarkation analysis
embark_analysis = df.groupby('embark_town').agg(
    passengers=('survived', 'count'),
    survival_rate=('survived', 'mean'),
    avg_fare=('fare', 'median'),
    first_class=('pclass', lambda x: (x == 1).mean())
).sort_values('survival_rate', ascending=False)

print("\n=== Embarkation Insights ===")
print(embark_analysis)

# Statistical tests
print("\n=== Statistical Significance Tests ===")
# Class vs survival
class_surv = df[['pclass', 'survived']].groupby('pclass').mean()
_, pval_class = stats.kruskal(*[group['survived'].values for name, group in df.groupby('pclass')])
print(f"Class vs Survival (p-value): {pval_class:.4f}")

# Gender vs survival
gender_table = pd.crosstab(df['sex'], df['survived'])
_, pval_gender, _, _ = stats.chi2_contingency(gender_table)
print(f"Gender vs Survival (p-value): {pval_gender:.4f}")

# =====================
# Key Findings Summary
# =====================
print("\n=== Key Insights Summary ===")
print("1. Survival Drivers:")
print("   - Females: 74% survival vs Males: 19%")
print("   - 1st Class: 63% survival vs 3rd Class: 24%")
print("   - Children (<10): Highest survival rate")
print("2. Socioeconomic Factors:")
print("   - Strong correlation between fare and class (-0.55)")
print("   - Cherbourg passengers: 55% survival (higher 1st class % & fares)")
print("3. Data Quality:")
print("   - Age imputed (19.9% missing)")
print("   - Deck feature removed (77% missing)")
print("4. Relationships:")
print("   - Family size 2-4 had optimal survival rates")
print("   - Solo travelers had lower survival rate (30%)")
